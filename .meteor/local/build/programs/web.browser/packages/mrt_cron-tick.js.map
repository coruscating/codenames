)]}'
{"version":3,"file":"/packages/mrt:cron-tick.js","sources":["mrt:cron-tick/cron.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,uC;AACA,uD;;AAEA,2B;AACA,kB;AACA,E;AACA,mC;AACA,E;AACA,kB;AACA,uB;;AAEA,iC;AACA,gB;AACA,c;AACA,C;;AAEA,0B;AACA,uC;AACA,8D;AACA,I;;AAEA,2C;AACA,yD;AACA,I;AACA,E;AACA,oB;AACA,oB;AACA,I;AACA,sC;AACA,qB;AACA,oC;AACA,iB;AACA,sB;AACA,O;AACA,O;;AAEA,kD;AACA,yD;;AAEA,gC;AACA,iB;AACA,sC;AACA,O;AACA,O;AACA,G;AACA,E","sourcesContent":["// Veeeeeeery simple cron job singleton\n// ticks every 1 minute, set a job to go every X ticks.\n\nCron = function(interval) {\n  var self = this;\n  \n  interval = interval || 60 * 1000;\n  \n  self._jobs = [];\n  self._schedules = [];\n\n  Meteor.setInterval(function() {\n    self.tick();\n  }, interval)\n}\n\n_.extend(Cron.prototype, {\n  addJob: function(every_x_ticks, fn) {\n    this._jobs.push({fn: fn, every: every_x_ticks, count: 0});\n  },\n\n  addScheduleJob: function(unix_time, fn) {\n    this._schedules.push({fn: fn, unix_time: unix_time});\n  },\n  \n  tick: function() {\n    var self = this;\n    \n    _.each(self._jobs, function(job) {\n      job.count += 1;\n      if (job.count === job.every) {\n        job.fn();\n        job.count = 0;\n      }\n    });\n\n    _.each(self._schedules, function(job, index) {\n      var ts = Math.round((new Date()).getTime() / 1000);\n\n      if (ts >= job.unix_time) {\n        job.fn();\n        delete self._schedules[index];\n      }\n    });\n  }\n})"]}